FROM ubuntu:xenial
ARG PV_CFLAGS
ARG PV_LFLAGS

# Install prerequisites for adding repositories and build tools
RUN apt-get -y update && \
    apt-get -y install \
    software-properties-common \
    libpcre3-dev \
    libgeoip-dev \
    libssl-dev \
    make \
    gcc-4.8 \
    git \
    curl \
    python2.7 \
    python-pip \
    build-essential \
    libncurses5-dev \
    texinfo

# Set GCC 4.8 as the default compiler
RUN update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-4.8 10

# Download, build, and install GDB with Python 2 support
RUN cd /tmp && \
    curl -L http://ftp.gnu.org/gnu/gdb/gdb-7.12.1.tar.gz | tar xzf - && \
    cd gdb-7.12.1 && \
    ./configure --prefix=/opt --with-python=python2 && \
    make all && \
    make install

# Install GEF-legacy (GDB Enhanced Features)
RUN git clone https://github.com/hugsy/gef-legacy /opt/gef-legacy && \
    echo "source /opt/gef-legacy/gef.py" >> ~/.gdbinit

# NGINX installation and setup
ADD vendor/nginx/nginx-1.4.0.tar.gz /
WORKDIR /nginx-1.4.0
RUN ./configure \
    --with-cc-opt="${PV_CFLAGS}" \
    --with-ld-opt="${PV_LFLAGS}" \
    --with-http_geoip_module \
    --with-http_ssl_module \
    --with-http_gzip_static_module \
    --with-http_stub_status_module \
    --with-http_spdy_module \
    --prefix=/etc/nginx \
    --pid-path=/var/run/nginx.pid \
    --sbin-path=/usr/local/sbin/nginx 

RUN make install

# Configure nginx with a 100K boilerplate response
WORKDIR /etc/nginx
COPY html html
RUN chown www-data html
RUN sed -i -e 's/#user  nobody/user  www-data/g' ./conf/nginx.conf
#RUN sed -i -e 's/worker_processes  1/worker_processes  4/g' ./conf/nginx.conf

# NGINX listens to port 80 and 443
EXPOSE 80 443

# Entrypoint
ENTRYPOINT ["nginx", "-g", "daemon off;"]

# Provide information about the GDB installation
RUN echo && echo "[+] gdb+py2 can be found as /opt/bin/gdb" && echo
